import logging

# commands
CMD_POLL = b'000'
CMD_STATUS_REQUEST = b'001'
CMD_LABELS_REQUEST = b'002'
CMD_SET_TIME_DATE = b'010'
CMD_OUTPUT_CONTROL = b'020'
CMD_PARTITION_ARM_CONTROL_AWAY = b'030'
CMD_PARTITION_ARM_CONTROL_STAY = b'031'
CMD_PARTITION_ARM_CONTROL_ARMED = b'032'
CMD_PARTITION_ARM_CONTROL_WITH_CODE = b'033'
CMD_PARTITION_DISARM_CONTROL = b'040'
CMD_TIME_STAMP_CONTROL = b'055'
CMD_TIME_DATE_BCAST_CONTROL = b'056'
CMD_TEMPERATURE_BCAST_CONTROL = b'057'
CMD_VIRTUAL_KEYBOARD_CONTORL = b'058'
CMD_TRIGGER_PANIC_ALARM = b'060'
CMD_KEY_PRESSED = b'070'
CMD_SET_BAUD_RATE = b'080'
CMD_CODE_SEND = b'200'

#IT-100 messages codes
MSG_ACK = b'500'
MSG_ERROR = b'501'
MSG_SYSTEM_ERROR = b'502'
MSG_TIME_DATE_BCAST = b'550'
MSG_LABELS = b'570'
MSG_BAUD_RATE_SET = b'580'
MSG_ZONE_ALARM = b'601'
MSG_ZONE_ALARM_RESTORE = b'602'
MSG_ZONE_TAMPER = b'603'
MSG_ZONE_TAMPER_RESTORE = b'604'
MSG_ZONE_FAULT = b'605'
MSG_ZONE_FAULT_RESTORE = b'606'
MSG_ZONE_OPEN = b'609'
MSG_ZONE_RESTORED = b'610'
MSG_DURESS_ALARM = b'620'
MSG_FIRE_KEY_ALARM = b'621'
MSG_FIRE_KEY_RESTORED = b'622'
MSG_AUXILARY_KEY_ALARM = b'623'
MSG_AUXILARY_KEY_RESTORED = b'624'
MSG_PANIC_KEY_ALARM = b'625'
MSG_PANIC_KEY_RESTORED = b'626'
MSG_AUXILARY_INPUT_ALARM = b'631'
MSG_AUXILARY_INPUT_RESTORED = b'632'
MSG_PARTITION_READY = b'650'
MSG_PARTITION_NOT_READY = b'651'
MSG_PARTITION_ARMED = b'652'
MSG_PARTITION_READY_TO_FORCE_ARM = b'653'
MSG_PARTITION_IN_ALARM = b'654'
MSG_PARTITION_DISARMED = b'655'
MSG_PARTITION_EXIT_DELAY = b'656'
MSG_PARTITION_ENTRY_DELAY = b'657'
MSG_KEYPAD_LOCKOUT = b'658'
MSG_KEYPAD_BLANKING = b'659'
MSG_COMMAND_OUTPUT = b'660'
MSG_INVALID_CODE = b'670'
MSG_FUNCTION_NOT_AVAILABLE = b'671'
MSG_FAILED_TO_ARM = b'672'
MSG_PARTITION_BUSY = b'673'
MSG_PARTITION_USER_CLOSING = b'700'
MSG_PARTITION_SPECIAL_CLOSING = b'701'
MSG_PARTITION_PARTIAL_CLOSING = b'702'
MSG_PARTITION_USER_OPENING = b'750'
MSG_PARTITION_SPECIAL_OPENING = b'751'
MSG_PANEL_BATTERY_TROUBLE = b'800'
MSG_PANEL_BATTERY_RESTORED = b'801'
MSG_PANEL_AC_TROUBLE = b'802'
MSG_PANEL_AC_RESTORED = b'803'
MSG_SYSTEM_BELL_TROUBLE = b'806'
MSG_SYSTEM_BELL_RESTORED = b'807'
MSG_GENERAL_DEV_LOW_BATTERY = b'821'
MSG_GENERAL_DEV_LOW_BATTERY_RESTORED = b'822'
MSG_GENERAL_SYSTEM_TAMPER = b'829'
MSG_GENERAL_SYSTEM_TAMPER_RESTORED = b'830'
MSG_PARTITION_TROUBLE = b'840'
MSG_PARTITION_TROUBLE_RESTORED = b'841'
MSG_FIRE_TROUBLE_ALARM = b'842'
MSG_FIRE_TROUBLE_RESTORED = b'843'
MSG_KEYBUS_FAULT = b'896'
MSG_KEYBUS_RESTORED = b'897'
MSG_CODE_REQUIRED = b'900'
MSG_LCD_UPDATE = b'901'
MSG_LED_STATUS = b'903'
MSG_BEEP_STATUS = b'904'
MSG_VERSION = b'908'

_LOGGER = logging.getLogger(__name__)

class DSCMessage():
    def __init__(self, command, data=''):
        self.command = command
        self.data = data

    def checksum(self):
        cksum = 0

        for x in (self.command + self.data):
            cksum += x

        return bytearray('{0:02X}'.format(cksum % 256).encode())
        #return '{0:02X}'.format(sum([for x in (self.command + self.data)]) % 256)

    def serialize(self):
        return b''.join([self.command, self.data, self.checksum(), b'\r\n'])

    @classmethod
    def deserialize(cls, rawdata):
        command = rawdata[0:3]
        data = rawdata[3:-4]
        checksum = rawdata[-4:-2]

        message = cls(command, data)

        if message.checksum() != checksum:
            print('checksum failed')
        
        return message

    
